// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/inchori/starknet-indexer/ent/starknetdeclaretx"
)

// StarknetDeclareTx is the model entity for the StarknetDeclareTx schema.
type StarknetDeclareTx struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// BlockNumber holds the value of the "block_number" field.
	BlockNumber int `json:"block_number,omitempty"`
	// DeclareTxHash holds the value of the "declare_tx_hash" field.
	DeclareTxHash string `json:"declare_tx_hash,omitempty"`
	// ClassHash holds the value of the "class_hash" field.
	ClassHash    string `json:"class_hash,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*StarknetDeclareTx) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case starknetdeclaretx.FieldID, starknetdeclaretx.FieldBlockNumber:
			values[i] = new(sql.NullInt64)
		case starknetdeclaretx.FieldDeclareTxHash, starknetdeclaretx.FieldClassHash:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the StarknetDeclareTx fields.
func (sdt *StarknetDeclareTx) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case starknetdeclaretx.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			sdt.ID = int(value.Int64)
		case starknetdeclaretx.FieldBlockNumber:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field block_number", values[i])
			} else if value.Valid {
				sdt.BlockNumber = int(value.Int64)
			}
		case starknetdeclaretx.FieldDeclareTxHash:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field declare_tx_hash", values[i])
			} else if value.Valid {
				sdt.DeclareTxHash = value.String
			}
		case starknetdeclaretx.FieldClassHash:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field class_hash", values[i])
			} else if value.Valid {
				sdt.ClassHash = value.String
			}
		default:
			sdt.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the StarknetDeclareTx.
// This includes values selected through modifiers, order, etc.
func (sdt *StarknetDeclareTx) Value(name string) (ent.Value, error) {
	return sdt.selectValues.Get(name)
}

// Update returns a builder for updating this StarknetDeclareTx.
// Note that you need to call StarknetDeclareTx.Unwrap() before calling this method if this StarknetDeclareTx
// was returned from a transaction, and the transaction was committed or rolled back.
func (sdt *StarknetDeclareTx) Update() *StarknetDeclareTxUpdateOne {
	return NewStarknetDeclareTxClient(sdt.config).UpdateOne(sdt)
}

// Unwrap unwraps the StarknetDeclareTx entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (sdt *StarknetDeclareTx) Unwrap() *StarknetDeclareTx {
	_tx, ok := sdt.config.driver.(*txDriver)
	if !ok {
		panic("ent: StarknetDeclareTx is not a transactional entity")
	}
	sdt.config.driver = _tx.drv
	return sdt
}

// String implements the fmt.Stringer.
func (sdt *StarknetDeclareTx) String() string {
	var builder strings.Builder
	builder.WriteString("StarknetDeclareTx(")
	builder.WriteString(fmt.Sprintf("id=%v, ", sdt.ID))
	builder.WriteString("block_number=")
	builder.WriteString(fmt.Sprintf("%v", sdt.BlockNumber))
	builder.WriteString(", ")
	builder.WriteString("declare_tx_hash=")
	builder.WriteString(sdt.DeclareTxHash)
	builder.WriteString(", ")
	builder.WriteString("class_hash=")
	builder.WriteString(sdt.ClassHash)
	builder.WriteByte(')')
	return builder.String()
}

// StarknetDeclareTxes is a parsable slice of StarknetDeclareTx.
type StarknetDeclareTxes []*StarknetDeclareTx
