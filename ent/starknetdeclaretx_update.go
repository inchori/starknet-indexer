// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/inchori/starknet-indexer/ent/predicate"
	"github.com/inchori/starknet-indexer/ent/starknetdeclaretx"
)

// StarknetDeclareTxUpdate is the builder for updating StarknetDeclareTx entities.
type StarknetDeclareTxUpdate struct {
	config
	hooks    []Hook
	mutation *StarknetDeclareTxMutation
}

// Where appends a list predicates to the StarknetDeclareTxUpdate builder.
func (sdtu *StarknetDeclareTxUpdate) Where(ps ...predicate.StarknetDeclareTx) *StarknetDeclareTxUpdate {
	sdtu.mutation.Where(ps...)
	return sdtu
}

// SetBlockNumber sets the "block_number" field.
func (sdtu *StarknetDeclareTxUpdate) SetBlockNumber(i int) *StarknetDeclareTxUpdate {
	sdtu.mutation.ResetBlockNumber()
	sdtu.mutation.SetBlockNumber(i)
	return sdtu
}

// SetNillableBlockNumber sets the "block_number" field if the given value is not nil.
func (sdtu *StarknetDeclareTxUpdate) SetNillableBlockNumber(i *int) *StarknetDeclareTxUpdate {
	if i != nil {
		sdtu.SetBlockNumber(*i)
	}
	return sdtu
}

// AddBlockNumber adds i to the "block_number" field.
func (sdtu *StarknetDeclareTxUpdate) AddBlockNumber(i int) *StarknetDeclareTxUpdate {
	sdtu.mutation.AddBlockNumber(i)
	return sdtu
}

// SetDeclareTxHash sets the "declare_tx_hash" field.
func (sdtu *StarknetDeclareTxUpdate) SetDeclareTxHash(s string) *StarknetDeclareTxUpdate {
	sdtu.mutation.SetDeclareTxHash(s)
	return sdtu
}

// SetNillableDeclareTxHash sets the "declare_tx_hash" field if the given value is not nil.
func (sdtu *StarknetDeclareTxUpdate) SetNillableDeclareTxHash(s *string) *StarknetDeclareTxUpdate {
	if s != nil {
		sdtu.SetDeclareTxHash(*s)
	}
	return sdtu
}

// SetClassHash sets the "class_hash" field.
func (sdtu *StarknetDeclareTxUpdate) SetClassHash(s string) *StarknetDeclareTxUpdate {
	sdtu.mutation.SetClassHash(s)
	return sdtu
}

// SetNillableClassHash sets the "class_hash" field if the given value is not nil.
func (sdtu *StarknetDeclareTxUpdate) SetNillableClassHash(s *string) *StarknetDeclareTxUpdate {
	if s != nil {
		sdtu.SetClassHash(*s)
	}
	return sdtu
}

// Mutation returns the StarknetDeclareTxMutation object of the builder.
func (sdtu *StarknetDeclareTxUpdate) Mutation() *StarknetDeclareTxMutation {
	return sdtu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (sdtu *StarknetDeclareTxUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, sdtu.sqlSave, sdtu.mutation, sdtu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (sdtu *StarknetDeclareTxUpdate) SaveX(ctx context.Context) int {
	affected, err := sdtu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (sdtu *StarknetDeclareTxUpdate) Exec(ctx context.Context) error {
	_, err := sdtu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sdtu *StarknetDeclareTxUpdate) ExecX(ctx context.Context) {
	if err := sdtu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (sdtu *StarknetDeclareTxUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(starknetdeclaretx.Table, starknetdeclaretx.Columns, sqlgraph.NewFieldSpec(starknetdeclaretx.FieldID, field.TypeInt))
	if ps := sdtu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := sdtu.mutation.BlockNumber(); ok {
		_spec.SetField(starknetdeclaretx.FieldBlockNumber, field.TypeInt, value)
	}
	if value, ok := sdtu.mutation.AddedBlockNumber(); ok {
		_spec.AddField(starknetdeclaretx.FieldBlockNumber, field.TypeInt, value)
	}
	if value, ok := sdtu.mutation.DeclareTxHash(); ok {
		_spec.SetField(starknetdeclaretx.FieldDeclareTxHash, field.TypeString, value)
	}
	if value, ok := sdtu.mutation.ClassHash(); ok {
		_spec.SetField(starknetdeclaretx.FieldClassHash, field.TypeString, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, sdtu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{starknetdeclaretx.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	sdtu.mutation.done = true
	return n, nil
}

// StarknetDeclareTxUpdateOne is the builder for updating a single StarknetDeclareTx entity.
type StarknetDeclareTxUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *StarknetDeclareTxMutation
}

// SetBlockNumber sets the "block_number" field.
func (sdtuo *StarknetDeclareTxUpdateOne) SetBlockNumber(i int) *StarknetDeclareTxUpdateOne {
	sdtuo.mutation.ResetBlockNumber()
	sdtuo.mutation.SetBlockNumber(i)
	return sdtuo
}

// SetNillableBlockNumber sets the "block_number" field if the given value is not nil.
func (sdtuo *StarknetDeclareTxUpdateOne) SetNillableBlockNumber(i *int) *StarknetDeclareTxUpdateOne {
	if i != nil {
		sdtuo.SetBlockNumber(*i)
	}
	return sdtuo
}

// AddBlockNumber adds i to the "block_number" field.
func (sdtuo *StarknetDeclareTxUpdateOne) AddBlockNumber(i int) *StarknetDeclareTxUpdateOne {
	sdtuo.mutation.AddBlockNumber(i)
	return sdtuo
}

// SetDeclareTxHash sets the "declare_tx_hash" field.
func (sdtuo *StarknetDeclareTxUpdateOne) SetDeclareTxHash(s string) *StarknetDeclareTxUpdateOne {
	sdtuo.mutation.SetDeclareTxHash(s)
	return sdtuo
}

// SetNillableDeclareTxHash sets the "declare_tx_hash" field if the given value is not nil.
func (sdtuo *StarknetDeclareTxUpdateOne) SetNillableDeclareTxHash(s *string) *StarknetDeclareTxUpdateOne {
	if s != nil {
		sdtuo.SetDeclareTxHash(*s)
	}
	return sdtuo
}

// SetClassHash sets the "class_hash" field.
func (sdtuo *StarknetDeclareTxUpdateOne) SetClassHash(s string) *StarknetDeclareTxUpdateOne {
	sdtuo.mutation.SetClassHash(s)
	return sdtuo
}

// SetNillableClassHash sets the "class_hash" field if the given value is not nil.
func (sdtuo *StarknetDeclareTxUpdateOne) SetNillableClassHash(s *string) *StarknetDeclareTxUpdateOne {
	if s != nil {
		sdtuo.SetClassHash(*s)
	}
	return sdtuo
}

// Mutation returns the StarknetDeclareTxMutation object of the builder.
func (sdtuo *StarknetDeclareTxUpdateOne) Mutation() *StarknetDeclareTxMutation {
	return sdtuo.mutation
}

// Where appends a list predicates to the StarknetDeclareTxUpdate builder.
func (sdtuo *StarknetDeclareTxUpdateOne) Where(ps ...predicate.StarknetDeclareTx) *StarknetDeclareTxUpdateOne {
	sdtuo.mutation.Where(ps...)
	return sdtuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (sdtuo *StarknetDeclareTxUpdateOne) Select(field string, fields ...string) *StarknetDeclareTxUpdateOne {
	sdtuo.fields = append([]string{field}, fields...)
	return sdtuo
}

// Save executes the query and returns the updated StarknetDeclareTx entity.
func (sdtuo *StarknetDeclareTxUpdateOne) Save(ctx context.Context) (*StarknetDeclareTx, error) {
	return withHooks(ctx, sdtuo.sqlSave, sdtuo.mutation, sdtuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (sdtuo *StarknetDeclareTxUpdateOne) SaveX(ctx context.Context) *StarknetDeclareTx {
	node, err := sdtuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (sdtuo *StarknetDeclareTxUpdateOne) Exec(ctx context.Context) error {
	_, err := sdtuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sdtuo *StarknetDeclareTxUpdateOne) ExecX(ctx context.Context) {
	if err := sdtuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (sdtuo *StarknetDeclareTxUpdateOne) sqlSave(ctx context.Context) (_node *StarknetDeclareTx, err error) {
	_spec := sqlgraph.NewUpdateSpec(starknetdeclaretx.Table, starknetdeclaretx.Columns, sqlgraph.NewFieldSpec(starknetdeclaretx.FieldID, field.TypeInt))
	id, ok := sdtuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "StarknetDeclareTx.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := sdtuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, starknetdeclaretx.FieldID)
		for _, f := range fields {
			if !starknetdeclaretx.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != starknetdeclaretx.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := sdtuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := sdtuo.mutation.BlockNumber(); ok {
		_spec.SetField(starknetdeclaretx.FieldBlockNumber, field.TypeInt, value)
	}
	if value, ok := sdtuo.mutation.AddedBlockNumber(); ok {
		_spec.AddField(starknetdeclaretx.FieldBlockNumber, field.TypeInt, value)
	}
	if value, ok := sdtuo.mutation.DeclareTxHash(); ok {
		_spec.SetField(starknetdeclaretx.FieldDeclareTxHash, field.TypeString, value)
	}
	if value, ok := sdtuo.mutation.ClassHash(); ok {
		_spec.SetField(starknetdeclaretx.FieldClassHash, field.TypeString, value)
	}
	_node = &StarknetDeclareTx{config: sdtuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, sdtuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{starknetdeclaretx.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	sdtuo.mutation.done = true
	return _node, nil
}
