// Code generated by ent, DO NOT EDIT.

package starknetdeclaretx

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/inchori/starknet-indexer/internal/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.StarknetDeclareTx {
	return predicate.StarknetDeclareTx(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.StarknetDeclareTx {
	return predicate.StarknetDeclareTx(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.StarknetDeclareTx {
	return predicate.StarknetDeclareTx(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.StarknetDeclareTx {
	return predicate.StarknetDeclareTx(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.StarknetDeclareTx {
	return predicate.StarknetDeclareTx(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.StarknetDeclareTx {
	return predicate.StarknetDeclareTx(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.StarknetDeclareTx {
	return predicate.StarknetDeclareTx(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.StarknetDeclareTx {
	return predicate.StarknetDeclareTx(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.StarknetDeclareTx {
	return predicate.StarknetDeclareTx(sql.FieldLTE(FieldID, id))
}

// BlockNumber applies equality check predicate on the "block_number" field. It's identical to BlockNumberEQ.
func BlockNumber(v int) predicate.StarknetDeclareTx {
	return predicate.StarknetDeclareTx(sql.FieldEQ(FieldBlockNumber, v))
}

// DeclareTxHash applies equality check predicate on the "declare_tx_hash" field. It's identical to DeclareTxHashEQ.
func DeclareTxHash(v string) predicate.StarknetDeclareTx {
	return predicate.StarknetDeclareTx(sql.FieldEQ(FieldDeclareTxHash, v))
}

// ClassHash applies equality check predicate on the "class_hash" field. It's identical to ClassHashEQ.
func ClassHash(v string) predicate.StarknetDeclareTx {
	return predicate.StarknetDeclareTx(sql.FieldEQ(FieldClassHash, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.StarknetDeclareTx {
	return predicate.StarknetDeclareTx(sql.FieldEQ(FieldCreatedAt, v))
}

// BlockNumberEQ applies the EQ predicate on the "block_number" field.
func BlockNumberEQ(v int) predicate.StarknetDeclareTx {
	return predicate.StarknetDeclareTx(sql.FieldEQ(FieldBlockNumber, v))
}

// BlockNumberNEQ applies the NEQ predicate on the "block_number" field.
func BlockNumberNEQ(v int) predicate.StarknetDeclareTx {
	return predicate.StarknetDeclareTx(sql.FieldNEQ(FieldBlockNumber, v))
}

// BlockNumberIn applies the In predicate on the "block_number" field.
func BlockNumberIn(vs ...int) predicate.StarknetDeclareTx {
	return predicate.StarknetDeclareTx(sql.FieldIn(FieldBlockNumber, vs...))
}

// BlockNumberNotIn applies the NotIn predicate on the "block_number" field.
func BlockNumberNotIn(vs ...int) predicate.StarknetDeclareTx {
	return predicate.StarknetDeclareTx(sql.FieldNotIn(FieldBlockNumber, vs...))
}

// BlockNumberGT applies the GT predicate on the "block_number" field.
func BlockNumberGT(v int) predicate.StarknetDeclareTx {
	return predicate.StarknetDeclareTx(sql.FieldGT(FieldBlockNumber, v))
}

// BlockNumberGTE applies the GTE predicate on the "block_number" field.
func BlockNumberGTE(v int) predicate.StarknetDeclareTx {
	return predicate.StarknetDeclareTx(sql.FieldGTE(FieldBlockNumber, v))
}

// BlockNumberLT applies the LT predicate on the "block_number" field.
func BlockNumberLT(v int) predicate.StarknetDeclareTx {
	return predicate.StarknetDeclareTx(sql.FieldLT(FieldBlockNumber, v))
}

// BlockNumberLTE applies the LTE predicate on the "block_number" field.
func BlockNumberLTE(v int) predicate.StarknetDeclareTx {
	return predicate.StarknetDeclareTx(sql.FieldLTE(FieldBlockNumber, v))
}

// DeclareTxHashEQ applies the EQ predicate on the "declare_tx_hash" field.
func DeclareTxHashEQ(v string) predicate.StarknetDeclareTx {
	return predicate.StarknetDeclareTx(sql.FieldEQ(FieldDeclareTxHash, v))
}

// DeclareTxHashNEQ applies the NEQ predicate on the "declare_tx_hash" field.
func DeclareTxHashNEQ(v string) predicate.StarknetDeclareTx {
	return predicate.StarknetDeclareTx(sql.FieldNEQ(FieldDeclareTxHash, v))
}

// DeclareTxHashIn applies the In predicate on the "declare_tx_hash" field.
func DeclareTxHashIn(vs ...string) predicate.StarknetDeclareTx {
	return predicate.StarknetDeclareTx(sql.FieldIn(FieldDeclareTxHash, vs...))
}

// DeclareTxHashNotIn applies the NotIn predicate on the "declare_tx_hash" field.
func DeclareTxHashNotIn(vs ...string) predicate.StarknetDeclareTx {
	return predicate.StarknetDeclareTx(sql.FieldNotIn(FieldDeclareTxHash, vs...))
}

// DeclareTxHashGT applies the GT predicate on the "declare_tx_hash" field.
func DeclareTxHashGT(v string) predicate.StarknetDeclareTx {
	return predicate.StarknetDeclareTx(sql.FieldGT(FieldDeclareTxHash, v))
}

// DeclareTxHashGTE applies the GTE predicate on the "declare_tx_hash" field.
func DeclareTxHashGTE(v string) predicate.StarknetDeclareTx {
	return predicate.StarknetDeclareTx(sql.FieldGTE(FieldDeclareTxHash, v))
}

// DeclareTxHashLT applies the LT predicate on the "declare_tx_hash" field.
func DeclareTxHashLT(v string) predicate.StarknetDeclareTx {
	return predicate.StarknetDeclareTx(sql.FieldLT(FieldDeclareTxHash, v))
}

// DeclareTxHashLTE applies the LTE predicate on the "declare_tx_hash" field.
func DeclareTxHashLTE(v string) predicate.StarknetDeclareTx {
	return predicate.StarknetDeclareTx(sql.FieldLTE(FieldDeclareTxHash, v))
}

// DeclareTxHashContains applies the Contains predicate on the "declare_tx_hash" field.
func DeclareTxHashContains(v string) predicate.StarknetDeclareTx {
	return predicate.StarknetDeclareTx(sql.FieldContains(FieldDeclareTxHash, v))
}

// DeclareTxHashHasPrefix applies the HasPrefix predicate on the "declare_tx_hash" field.
func DeclareTxHashHasPrefix(v string) predicate.StarknetDeclareTx {
	return predicate.StarknetDeclareTx(sql.FieldHasPrefix(FieldDeclareTxHash, v))
}

// DeclareTxHashHasSuffix applies the HasSuffix predicate on the "declare_tx_hash" field.
func DeclareTxHashHasSuffix(v string) predicate.StarknetDeclareTx {
	return predicate.StarknetDeclareTx(sql.FieldHasSuffix(FieldDeclareTxHash, v))
}

// DeclareTxHashEqualFold applies the EqualFold predicate on the "declare_tx_hash" field.
func DeclareTxHashEqualFold(v string) predicate.StarknetDeclareTx {
	return predicate.StarknetDeclareTx(sql.FieldEqualFold(FieldDeclareTxHash, v))
}

// DeclareTxHashContainsFold applies the ContainsFold predicate on the "declare_tx_hash" field.
func DeclareTxHashContainsFold(v string) predicate.StarknetDeclareTx {
	return predicate.StarknetDeclareTx(sql.FieldContainsFold(FieldDeclareTxHash, v))
}

// ClassHashEQ applies the EQ predicate on the "class_hash" field.
func ClassHashEQ(v string) predicate.StarknetDeclareTx {
	return predicate.StarknetDeclareTx(sql.FieldEQ(FieldClassHash, v))
}

// ClassHashNEQ applies the NEQ predicate on the "class_hash" field.
func ClassHashNEQ(v string) predicate.StarknetDeclareTx {
	return predicate.StarknetDeclareTx(sql.FieldNEQ(FieldClassHash, v))
}

// ClassHashIn applies the In predicate on the "class_hash" field.
func ClassHashIn(vs ...string) predicate.StarknetDeclareTx {
	return predicate.StarknetDeclareTx(sql.FieldIn(FieldClassHash, vs...))
}

// ClassHashNotIn applies the NotIn predicate on the "class_hash" field.
func ClassHashNotIn(vs ...string) predicate.StarknetDeclareTx {
	return predicate.StarknetDeclareTx(sql.FieldNotIn(FieldClassHash, vs...))
}

// ClassHashGT applies the GT predicate on the "class_hash" field.
func ClassHashGT(v string) predicate.StarknetDeclareTx {
	return predicate.StarknetDeclareTx(sql.FieldGT(FieldClassHash, v))
}

// ClassHashGTE applies the GTE predicate on the "class_hash" field.
func ClassHashGTE(v string) predicate.StarknetDeclareTx {
	return predicate.StarknetDeclareTx(sql.FieldGTE(FieldClassHash, v))
}

// ClassHashLT applies the LT predicate on the "class_hash" field.
func ClassHashLT(v string) predicate.StarknetDeclareTx {
	return predicate.StarknetDeclareTx(sql.FieldLT(FieldClassHash, v))
}

// ClassHashLTE applies the LTE predicate on the "class_hash" field.
func ClassHashLTE(v string) predicate.StarknetDeclareTx {
	return predicate.StarknetDeclareTx(sql.FieldLTE(FieldClassHash, v))
}

// ClassHashContains applies the Contains predicate on the "class_hash" field.
func ClassHashContains(v string) predicate.StarknetDeclareTx {
	return predicate.StarknetDeclareTx(sql.FieldContains(FieldClassHash, v))
}

// ClassHashHasPrefix applies the HasPrefix predicate on the "class_hash" field.
func ClassHashHasPrefix(v string) predicate.StarknetDeclareTx {
	return predicate.StarknetDeclareTx(sql.FieldHasPrefix(FieldClassHash, v))
}

// ClassHashHasSuffix applies the HasSuffix predicate on the "class_hash" field.
func ClassHashHasSuffix(v string) predicate.StarknetDeclareTx {
	return predicate.StarknetDeclareTx(sql.FieldHasSuffix(FieldClassHash, v))
}

// ClassHashEqualFold applies the EqualFold predicate on the "class_hash" field.
func ClassHashEqualFold(v string) predicate.StarknetDeclareTx {
	return predicate.StarknetDeclareTx(sql.FieldEqualFold(FieldClassHash, v))
}

// ClassHashContainsFold applies the ContainsFold predicate on the "class_hash" field.
func ClassHashContainsFold(v string) predicate.StarknetDeclareTx {
	return predicate.StarknetDeclareTx(sql.FieldContainsFold(FieldClassHash, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.StarknetDeclareTx {
	return predicate.StarknetDeclareTx(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.StarknetDeclareTx {
	return predicate.StarknetDeclareTx(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.StarknetDeclareTx {
	return predicate.StarknetDeclareTx(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.StarknetDeclareTx {
	return predicate.StarknetDeclareTx(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.StarknetDeclareTx {
	return predicate.StarknetDeclareTx(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.StarknetDeclareTx {
	return predicate.StarknetDeclareTx(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.StarknetDeclareTx {
	return predicate.StarknetDeclareTx(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.StarknetDeclareTx {
	return predicate.StarknetDeclareTx(sql.FieldLTE(FieldCreatedAt, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.StarknetDeclareTx) predicate.StarknetDeclareTx {
	return predicate.StarknetDeclareTx(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.StarknetDeclareTx) predicate.StarknetDeclareTx {
	return predicate.StarknetDeclareTx(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.StarknetDeclareTx) predicate.StarknetDeclareTx {
	return predicate.StarknetDeclareTx(sql.NotPredicates(p))
}
