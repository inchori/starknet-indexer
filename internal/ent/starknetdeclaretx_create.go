// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/inchori/starknet-indexer/internal/ent/starknetdeclaretx"
)

// StarknetDeclareTxCreate is the builder for creating a StarknetDeclareTx entity.
type StarknetDeclareTxCreate struct {
	config
	mutation *StarknetDeclareTxMutation
	hooks    []Hook
}

// SetBlockNumber sets the "block_number" field.
func (sdtc *StarknetDeclareTxCreate) SetBlockNumber(i int) *StarknetDeclareTxCreate {
	sdtc.mutation.SetBlockNumber(i)
	return sdtc
}

// SetDeclareTxHash sets the "declare_tx_hash" field.
func (sdtc *StarknetDeclareTxCreate) SetDeclareTxHash(s string) *StarknetDeclareTxCreate {
	sdtc.mutation.SetDeclareTxHash(s)
	return sdtc
}

// SetClassHash sets the "class_hash" field.
func (sdtc *StarknetDeclareTxCreate) SetClassHash(s string) *StarknetDeclareTxCreate {
	sdtc.mutation.SetClassHash(s)
	return sdtc
}

// SetCreatedAt sets the "created_at" field.
func (sdtc *StarknetDeclareTxCreate) SetCreatedAt(t time.Time) *StarknetDeclareTxCreate {
	sdtc.mutation.SetCreatedAt(t)
	return sdtc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (sdtc *StarknetDeclareTxCreate) SetNillableCreatedAt(t *time.Time) *StarknetDeclareTxCreate {
	if t != nil {
		sdtc.SetCreatedAt(*t)
	}
	return sdtc
}

// Mutation returns the StarknetDeclareTxMutation object of the builder.
func (sdtc *StarknetDeclareTxCreate) Mutation() *StarknetDeclareTxMutation {
	return sdtc.mutation
}

// Save creates the StarknetDeclareTx in the database.
func (sdtc *StarknetDeclareTxCreate) Save(ctx context.Context) (*StarknetDeclareTx, error) {
	sdtc.defaults()
	return withHooks(ctx, sdtc.sqlSave, sdtc.mutation, sdtc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (sdtc *StarknetDeclareTxCreate) SaveX(ctx context.Context) *StarknetDeclareTx {
	v, err := sdtc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (sdtc *StarknetDeclareTxCreate) Exec(ctx context.Context) error {
	_, err := sdtc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sdtc *StarknetDeclareTxCreate) ExecX(ctx context.Context) {
	if err := sdtc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (sdtc *StarknetDeclareTxCreate) defaults() {
	if _, ok := sdtc.mutation.CreatedAt(); !ok {
		v := starknetdeclaretx.DefaultCreatedAt
		sdtc.mutation.SetCreatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (sdtc *StarknetDeclareTxCreate) check() error {
	if _, ok := sdtc.mutation.BlockNumber(); !ok {
		return &ValidationError{Name: "block_number", err: errors.New(`ent: missing required field "StarknetDeclareTx.block_number"`)}
	}
	if _, ok := sdtc.mutation.DeclareTxHash(); !ok {
		return &ValidationError{Name: "declare_tx_hash", err: errors.New(`ent: missing required field "StarknetDeclareTx.declare_tx_hash"`)}
	}
	if _, ok := sdtc.mutation.ClassHash(); !ok {
		return &ValidationError{Name: "class_hash", err: errors.New(`ent: missing required field "StarknetDeclareTx.class_hash"`)}
	}
	if _, ok := sdtc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "StarknetDeclareTx.created_at"`)}
	}
	return nil
}

func (sdtc *StarknetDeclareTxCreate) sqlSave(ctx context.Context) (*StarknetDeclareTx, error) {
	if err := sdtc.check(); err != nil {
		return nil, err
	}
	_node, _spec := sdtc.createSpec()
	if err := sqlgraph.CreateNode(ctx, sdtc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	sdtc.mutation.id = &_node.ID
	sdtc.mutation.done = true
	return _node, nil
}

func (sdtc *StarknetDeclareTxCreate) createSpec() (*StarknetDeclareTx, *sqlgraph.CreateSpec) {
	var (
		_node = &StarknetDeclareTx{config: sdtc.config}
		_spec = sqlgraph.NewCreateSpec(starknetdeclaretx.Table, sqlgraph.NewFieldSpec(starknetdeclaretx.FieldID, field.TypeInt))
	)
	if value, ok := sdtc.mutation.BlockNumber(); ok {
		_spec.SetField(starknetdeclaretx.FieldBlockNumber, field.TypeInt, value)
		_node.BlockNumber = value
	}
	if value, ok := sdtc.mutation.DeclareTxHash(); ok {
		_spec.SetField(starknetdeclaretx.FieldDeclareTxHash, field.TypeString, value)
		_node.DeclareTxHash = value
	}
	if value, ok := sdtc.mutation.ClassHash(); ok {
		_spec.SetField(starknetdeclaretx.FieldClassHash, field.TypeString, value)
		_node.ClassHash = value
	}
	if value, ok := sdtc.mutation.CreatedAt(); ok {
		_spec.SetField(starknetdeclaretx.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	return _node, _spec
}

// StarknetDeclareTxCreateBulk is the builder for creating many StarknetDeclareTx entities in bulk.
type StarknetDeclareTxCreateBulk struct {
	config
	err      error
	builders []*StarknetDeclareTxCreate
}

// Save creates the StarknetDeclareTx entities in the database.
func (sdtcb *StarknetDeclareTxCreateBulk) Save(ctx context.Context) ([]*StarknetDeclareTx, error) {
	if sdtcb.err != nil {
		return nil, sdtcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(sdtcb.builders))
	nodes := make([]*StarknetDeclareTx, len(sdtcb.builders))
	mutators := make([]Mutator, len(sdtcb.builders))
	for i := range sdtcb.builders {
		func(i int, root context.Context) {
			builder := sdtcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*StarknetDeclareTxMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, sdtcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, sdtcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, sdtcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (sdtcb *StarknetDeclareTxCreateBulk) SaveX(ctx context.Context) []*StarknetDeclareTx {
	v, err := sdtcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (sdtcb *StarknetDeclareTxCreateBulk) Exec(ctx context.Context) error {
	_, err := sdtcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sdtcb *StarknetDeclareTxCreateBulk) ExecX(ctx context.Context) {
	if err := sdtcb.Exec(ctx); err != nil {
		panic(err)
	}
}
